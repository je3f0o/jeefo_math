/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
* File Name   : index.js
* Created at  : 2019-10-31
* Updated at  : 2019-10-31
* Author      : jeefo
* Purpose     :
* Description :
* Reference   :
.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.*/
// ignore:start
"use strict";

/* globals*/
/* exported*/

// ignore:end

const { spawn }             = require("child_process");
const { promises : fs }     = require("fs");
const PackageVersionManager = require("./package_version_manager");

const cwd                  = process.cwd();
const temp_dir             = `${ cwd }/.temp_publish_dir`;
const self_version_manager = new PackageVersionManager(cwd);
const temp_version_manager = new PackageVersionManager(cwd, temp_dir);

const ensure_dir = async dirname => {
    let is_directory_exists;
    try {
        const stat = await fs.stat(dirname);
        is_directory_exists = stat.isDirectory();
    } catch (e) {}

    if (! is_directory_exists) {
        await fs.mkdir(dirname, { recursive : true });
    }
};

const rmdir = async (dirname) => {
    try {
        const files = await fs.readdir(dirname);
        for (const file of files) {
            const filepath = `${ dirname }/${ file }`;
            const stat = await fs.stat(filepath);
            if (stat.isDirectory()) {
                await rmdir(filepath);
            } else {
                await fs.unlink(filepath);
            }
        }
    } catch (e) {}

    await fs.rmdir(dirname);
};

module.exports = {
    async publish () {
        await ensure_dir(temp_dir);
        temp_version_manager.increment_minor();

        const publish_sh = new Promise ((resolve, reject) => {
            const args = [`${ __dirname }/publish.sh`, temp_dir];
            const bash = spawn("bash", args, { cwd });
            bash.stdout.on("data", data => {
                console.log(`stdout: ${ data }`);
            });
            const errors = [];
            bash.stderr.on("data", data => {
                errors.push(data);
            });
            bash.on("close", code => {
                if (code === 0) {
                    resolve();
                } else {
                    reject(errors.join('\n'));
                }
            });
        });

        publish_sh.then(() => {
            self_version_manager.increment_minor();
            return rmdir(temp_dir);
        }).then(() => {
            const version_str = self_version_manager.version.toString();
            console.log(`Done. Version: ${ version_str }`);
        }).catch(e => {
            console.error("Failed.");
            console.error(e);
        });
    }
};
